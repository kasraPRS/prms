@use "sass:math";
@use "sass:map";
@use "../../../../../assets/sass/core/components/variables" as v;

$node-margin-left: 15px;
$node-margin-top-bottom: 15px;
$symbol-size: map.get(v.$symbol-sizes, 45px);

.node {
    margin: $node-margin-top-bottom 0 $node-margin-top-bottom $node-margin-left;
}
.example-tree-invisible {
    display: none;
}

.example-tree ul,
.example-tree li {
    margin-top: 0;
    margin-bottom: 0;
    list-style-type: none;
}

/*
   * This padding sets alignment of the nested nodes.
   */
.example-tree .mat-nested-tree-node {
    display: block;
    div[role="group"] {
        padding-left: 40px;
    }
}
.node-container {
    margin-left: 20px;
}

/*
   * Padding for leaf nodes.
   * Leaf nodes need to have padding so as to align with other non-leaf nodes
   * under the same parent.
   */
// .example-tree div[role="group"] > .mat-tree-node {
//     padding-left: 40px;
// }
.with-v-line::after {
    content: "";
    display: block;
    border-left: 1px dashed v.$primary;
    height: auto;
    position: absolute;
    top: $node-margin-top-bottom;
    bottom: 0;
    left: calc($node-margin-left + math.div($symbol-size, 2));
}
.with-h-line::before {
    content: "";
    display: block;
    border-bottom: 1px dashed v.$primary;
    height: 1px;
    width: $node-margin-left + 6;
    position: absolute;
    top: calc($node-margin-top-bottom + math.div($symbol-size, 2));
    left: (math.div($symbol-size, 2) * -1);
}
.mat-tree {
    overflow: hidden;
    & > .mat-nested-tree-node {
        margin-left: 0;
    }
    & > .mat-tree-node {
        margin-left: 0;
    }
    & > .mat-nested-tree-node::before {
        display: none;
    }
    & > .mat-tree-node::before {
        display: none;
    }
}
